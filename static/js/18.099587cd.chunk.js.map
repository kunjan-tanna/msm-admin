{"version":3,"sources":["views/pages/Purchase/UpdateMedicine.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","configs/axiosConfig.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread.js","redux/actions/medicines/index.js","redux/actions/global/index.js"],"names":["UpdateMedicine","props","handleChange","name","data","setState","prevState","formData","value","dispatch","medicineActions","then","res","_id","rowData","medicineId","stock","purchaseRate","state","categories","packages","medicine","userdata","userInfo","console","log","this","globalActions","filter","item","userId","categoryId","map","label","packageId","pkgdata","abc","productName","sm","md","for","options","isClearable","className","classNamePrefix","id","maxMenuHeight","onChange","disabled","type","placeholder","quantity","MRPRate","saleRate","nextProps","updatedObject","length","categotyName","Object","assign","packageName","keys","React","Component","connect","auth","login","global","_assertThisInitialized","self","ReferenceError","require","config","axiosInstance","axios","create","baseURL","process","API_URL","_defineProperty","obj","key","defineProperty","enumerable","configurable","writable","_objectSpread","target","i","arguments","source","ownKeys","getOwnPropertySymbols","concat","sym","getOwnPropertyDescriptor","forEach","addMedicine","a","post","getMedicine","get","payload","getUpdatedMedicine","getMedicineById","updateMedicine","saleQuantity","totalNoOfItem","price","put","getCategory","getPackage","getPackageType","getRack","getCompanies","getPayments","getCustomers"],"mappings":"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","file":"static/js/18.099587cd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n   Card,\r\n   CardBody,\r\n   Row,\r\n   Col,\r\n   CardHeader,\r\n   CardTitle,\r\n   Button,\r\n   Form,\r\n   Input,\r\n   Label,\r\n   FormGroup,\r\n} from \"reactstrap\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport Select from \"react-select\";\r\nimport { history } from \"../../../history\";\r\nimport { connect } from \"react-redux\";\r\nimport * as globalActions from \"../../../redux/actions/global\";\r\nimport * as medicineActions from \"../../../redux/actions/medicines\";\r\n\r\nconst groupBadgeStyles = {\r\n   control: (base) => ({\r\n      ...base,\r\n   }),\r\n   option: (styles, { data, isDisabled, isFocused, isSelected }) => ({\r\n      ...styles,\r\n      height: 33,\r\n\r\n      //minHeight: 5,\r\n   }),\r\n};\r\nclass UpdateMedicine extends React.Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         categories: this.props.categories,\r\n         packages: this.props.packages,\r\n         rowData: [],\r\n         medicine: this.props.medicine,\r\n         formData: {},\r\n         data: [],\r\n         userdata: this.props.userInfo,\r\n      };\r\n   }\r\n   componentDidMount() {\r\n      console.log(\"purchaseQuantity\", this.props);\r\n      this.props.dispatch(globalActions.getCategory());\r\n      this.props.dispatch(globalActions.getPackage());\r\n      this.props.dispatch(medicineActions.getMedicine()).then((res) => {\r\n         // console.log(\"MEDICICICIIC\", res.data);\r\n         let data = res.data.filter((item) => {\r\n            if (item.userId === this.state.userdata._id) {\r\n               return item;\r\n            }\r\n         });\r\n\r\n         this.setState({ data });\r\n      });\r\n   }\r\n   static getDerivedStateFromProps(nextProps, prevState) {\r\n      const updatedObject = {};\r\n\r\n      // Categories\r\n      if (\r\n         nextProps.categories &&\r\n         nextProps.categories.length &&\r\n         nextProps.categories !== prevState.categories\r\n      ) {\r\n         const categories = nextProps.categories.map((item) => {\r\n            return {\r\n               label: item.categotyName,\r\n               value: item._id,\r\n            };\r\n         });\r\n         Object.assign(updatedObject, { categories: categories });\r\n      }\r\n\r\n      // Packages\r\n      if (\r\n         nextProps.packages &&\r\n         nextProps.packages.length &&\r\n         nextProps.packages !== prevState.packages\r\n      ) {\r\n         const packages = nextProps.packages.map((item) => {\r\n            return {\r\n               label: item.packageName,\r\n               value: item._id,\r\n            };\r\n         });\r\n         // console.log(\"--this.props.--\", nextProps.packages);\r\n         Object.assign(updatedObject, { packages: packages });\r\n      }\r\n      // Medicine\r\n      if (\r\n         nextProps.medicine &&\r\n         nextProps.medicine.length &&\r\n         nextProps.medicine !== prevState.medicine\r\n      ) {\r\n         const medicine = nextProps.medicine.map((item) => {\r\n            return {\r\n               label: item.productName,\r\n               value: item._id,\r\n            };\r\n         });\r\n         // console.log(\"--this.props.--\", nextProps);\r\n         Object.assign(updatedObject, { medicine: medicine });\r\n      }\r\n\r\n      return Object.keys(updatedObject).length !== 0 ? updatedObject : null;\r\n   }\r\n\r\n   handleChange = (name, data) => {\r\n      this.setState(\r\n         (prevState) => ({\r\n            formData: {\r\n               ...prevState.formData,\r\n               [name]: data.value,\r\n            },\r\n         }),\r\n         () => {\r\n            this.props\r\n               .dispatch(medicineActions.getMedicineById(data.value))\r\n               .then((res) => {\r\n                  if (res.data._id === data.value) {\r\n                     this.setState({ rowData: res.data });\r\n                     this.props.medicineId(res.data._id);\r\n                     this.props.stock(res.data.purchaseRate);\r\n                  }\r\n               });\r\n         }\r\n      );\r\n      // ()=>console.log('---setState---',this.state.formData,name,data)\r\n   };\r\n\r\n   render() {\r\n      const categories =\r\n         this.state.categories &&\r\n         this.state.categories.filter(\r\n            (item) => item.value === this.state.rowData.categoryId\r\n         );\r\n      const data = categories && categories.map((item) => item.label);\r\n\r\n      const packages =\r\n         this.state.packages &&\r\n         this.state.packages.filter(\r\n            (item) => item.value === this.state.rowData.packageId\r\n         );\r\n      const pkgdata = packages && packages.map((item) => item.label);\r\n\r\n      const abc =\r\n         this.state.data &&\r\n         this.state.data.map((item) => {\r\n            return {\r\n               label: item.productName,\r\n               value: item._id,\r\n            };\r\n         });\r\n      return (\r\n         <Row>\r\n            <Col sm=\"12\">\r\n               <Card>\r\n                  <CardBody>\r\n                     <Col sm=\"12\">\r\n                        <Row>\r\n                           <Col md=\"4\" sm=\"12\">\r\n                              <FormGroup>\r\n                                 <Label for=\"name\">Product Name</Label>\r\n                                 <Select\r\n                                    options={abc}\r\n                                    isClearable={false}\r\n                                    //styles={groupBadgeStyles}\r\n                                    className=\"React\"\r\n                                    classNamePrefix=\"select\"\r\n                                    id=\"medicineId\"\r\n                                    name=\"medicineId\"\r\n                                    maxMenuHeight={200}\r\n                                    //onChange={this.handleChange}\r\n                                    onChange={(data) =>\r\n                                       this.handleChange(\"medicineId\", data)\r\n                                    }\r\n                                 />\r\n                                 {/* <Input\r\n                                    type=\"text\"\r\n                                    id=\"status\"\r\n                                    name=\"status\"\r\n                                    placeholder=\"status\"\r\n                                    value={\r\n                                       this.state.data && this.state.data.status\r\n                                          ? this.state.data.status\r\n                                          : \"\"\r\n                                    }\r\n                                 /> */}\r\n                              </FormGroup>\r\n                           </Col>\r\n                           <Col md=\"4\" sm=\"12\">\r\n                              <FormGroup>\r\n                                 <Label for=\"name\">Category Name</Label>\r\n                                 <Input\r\n                                    disabled\r\n                                    type=\"text\"\r\n                                    id=\"categoryId\"\r\n                                    name=\"categoryId\"\r\n                                    placeholder=\"category Name\"\r\n                                    value={data}\r\n                                 />\r\n                              </FormGroup>\r\n                           </Col>\r\n                           <Col md=\"4\" sm=\"12\">\r\n                              <FormGroup>\r\n                                 <Label for=\"name\">Unit</Label>\r\n                                 <Input\r\n                                    disabled\r\n                                    type=\"text\"\r\n                                    id=\"packageId\"\r\n                                    name=\"packageId\"\r\n                                    placeholder=\"Unit\"\r\n                                    value={pkgdata}\r\n                                 />\r\n                              </FormGroup>\r\n                           </Col>\r\n                           <Col md=\"4\" sm=\"12\">\r\n                              <FormGroup>\r\n                                 <Label for=\"name\">Current Stock</Label>\r\n                                 <Input\r\n                                    disabled\r\n                                    type=\"text\"\r\n                                    id=\"quantity\"\r\n                                    name=\"quantity\"\r\n                                    placeholder=\"quantity\"\r\n                                    value={\r\n                                       this.state.rowData &&\r\n                                       this.state.rowData.quantity\r\n                                          ? this.state.rowData.quantity\r\n                                          : \"\"\r\n                                    }\r\n                                 />\r\n                              </FormGroup>\r\n                           </Col>\r\n                           <Col md=\"4\" sm=\"12\">\r\n                              <FormGroup>\r\n                                 <Label for=\"name\">Purchase Rate</Label>\r\n                                 <Input\r\n                                    disabled\r\n                                    type=\"text\"\r\n                                    id=\"purchaseRate\"\r\n                                    name=\"purchaseRate\"\r\n                                    placeholder=\"Purchase Rate\"\r\n                                    value={\r\n                                       this.state.rowData &&\r\n                                       this.state.rowData.purchaseRate\r\n                                          ? this.state.rowData.purchaseRate\r\n                                          : \"\"\r\n                                    }\r\n                                 />\r\n                              </FormGroup>\r\n                           </Col>\r\n                           <Col md=\"4\" sm=\"12\">\r\n                              <FormGroup>\r\n                                 <Label for=\"name\">MRP Rate</Label>\r\n                                 <Input\r\n                                    disabled\r\n                                    type=\"text\"\r\n                                    id=\"MRPRate\"\r\n                                    name=\"MRPRate\"\r\n                                    placeholder=\"MRP Rate\"\r\n                                    value={\r\n                                       this.state.rowData &&\r\n                                       this.state.rowData.MRPRate\r\n                                          ? this.state.rowData.MRPRate\r\n                                          : \"\"\r\n                                    }\r\n                                 />\r\n                              </FormGroup>\r\n                           </Col>\r\n                           <Col md=\"4\" sm=\"12\">\r\n                              <FormGroup>\r\n                                 <Label for=\"name\">Sale Rate</Label>\r\n                                 <Input\r\n                                    disabled\r\n                                    type=\"text\"\r\n                                    id=\"saleRate\"\r\n                                    name=\"saleRate\"\r\n                                    placeholder=\"Sale Rate\"\r\n                                    value={\r\n                                       this.state.rowData &&\r\n                                       this.state.rowData.saleRate\r\n                                          ? this.state.rowData.saleRate\r\n                                          : \"\"\r\n                                    }\r\n                                 />\r\n                              </FormGroup>\r\n                           </Col>\r\n                        </Row>\r\n                     </Col>\r\n                  </CardBody>\r\n               </Card>\r\n            </Col>\r\n         </Row>\r\n      );\r\n   }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n   return {\r\n      //Once data are store in dispatch variable so whenever use it variable to call like this in below:\r\n      userInfo: state.auth.login.userInfo,\r\n      medicine: state.global.medicine,\r\n      categories: state.global.categories,\r\n      packages: state.global.packages,\r\n   };\r\n};\r\nexport default connect(mapStateToProps)(UpdateMedicine);\r\n","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import axios from \"axios\";\r\nrequire(\"dotenv\").config();\r\n\r\nconst axiosInstance = axios.create({\r\n   baseURL:\r\n      process.env.API_URL || \"https://fast-bastion-32942.herokuapp.com/api/\",\r\n});\r\n\r\nexport default axiosInstance;\r\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\nexport default function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? Object(arguments[i]) : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}","import axios from \"../../../configs/axiosConfig\";\r\n\r\n//Create Add Medicine\r\nexport const addMedicine = (data) => async (dispatch) => {\r\n   // console.log(\"ADD LEAD\",data)\r\n   const res = await axios.post(\"create/medicine\", data);\r\n   // console.log('Res',res)\r\n   return res;\r\n};\r\n\r\n//Get Medicine\r\nexport const getMedicine = () => async (dispatch) => {\r\n   const res = await axios.get(\"/medicine\");\r\n   // console.log('Get Leads',res)\r\n   if (res) {\r\n      dispatch({ type: \"GET_MEDICINE\", payload: res.data });\r\n   }\r\n   // console.log('Response',res)\r\n   return res;\r\n};\r\n//Get Updated Medicine\r\nexport const getUpdatedMedicine = () => async (dispatch) => {\r\n   const res = await axios.get(\"/test/data\");\r\n   // console.log('Get Leads',res)\r\n   // console.log('Response',res)\r\n   return res;\r\n};\r\n//Get Category By ID\r\nexport const getMedicineById = (id) => async (dispatch) => {\r\n   //console.log(\"LEADContact ID1\",id)\r\n   const res = await axios.get(`/get/medicine/${id}`);\r\n   // console.log(\"--RES\",res)\r\n   return res;\r\n};\r\n//Update Medicine\r\nexport const updateMedicine = (id, data) => async (dispatch) => {\r\n   // console.log(\"ADD LEAD\", data);\r\n   let obj = {\r\n      medicineId: data._id,\r\n      saleQuantity: data.saleQuantity,\r\n      quantity: data.quantity,\r\n\r\n      totalNoOfItem: data.totalNoOfItem,\r\n      price: data.price,\r\n   };\r\n   // console.log(\"DATA\", obj);\r\n   const res = await axios.put(`edit/medicine/${id}`, obj);\r\n   // console.log('Res',res)\r\n   return res;\r\n};\r\n","import axios from \"../../../configs/axiosConfig\";\r\n\r\n//get Categories\r\nexport const getCategory = () => async (dispatch) => {\r\n   const res = await axios.get(\"/category\");\r\n   if (res) {\r\n      dispatch({ type: \"CATEGORY\", payload: res.data });\r\n   }\r\n   // console.log(res)\r\n   return res;\r\n};\r\n//get packages\r\nexport const getPackage = () => async (dispatch) => {\r\n   const res = await axios.get(\"/package\");\r\n   if (res) {\r\n      dispatch({ type: \"PACKAGE\", payload: res.data });\r\n   }\r\n   return res;\r\n   //console.log(\"leadstatus\",res)\r\n};\r\n//get packagesType\r\nexport const getPackageType = () => async (dispatch) => {\r\n   const res = await axios.get(\"/packageType\");\r\n   if (res) {\r\n      dispatch({ type: \"PACKAGETYPE\", payload: res.data });\r\n   }\r\n   return res;\r\n   //console.log(\"leadstatus\",res)\r\n};\r\n//Get Racks\r\nexport const getRack = () => async (dispatch) => {\r\n   const res = await axios.get(\"/rack\");\r\n   if (res) {\r\n      dispatch({ type: \"RACK\", payload: res.data });\r\n   }\r\n   return res;\r\n};\r\n//get Companies\r\nexport const getCompanies = () => async (dispatch) => {\r\n   const res = await axios.get(\"/companies\");\r\n   if (res) {\r\n      dispatch({ type: \"COMPANIES\", payload: res.data });\r\n   }\r\n   // console.log(res)\r\n   return res;\r\n};\r\n//get payments\r\nexport const getPayments = () => async (dispatch) => {\r\n   const res = await axios.get(\"/payment\");\r\n   if (res) {\r\n      dispatch({ type: \"PAYMENTS\", payload: res.data });\r\n   }\r\n   // console.log(res)\r\n   return res;\r\n};\r\n//get customers\r\nexport const getCustomers = () => async (dispatch) => {\r\n   const res = await axios.get(\"/customer\");\r\n   if (res) {\r\n      dispatch({ type: \"CUSTOMERS\", payload: res.data });\r\n   }\r\n   // console.log(res)\r\n   return res;\r\n};\r\n"],"sourceRoot":""}